clc
clear all
%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: C:\Users\aaronknudtson\Downloads\GraceFO1009\MAG1B_2018-06-10_D_04.txt
%
% Auto-generated by MATLAB on 14-Oct-2020 16:47:16

%% Setup the Import Options and import the data

%{
Connecting via Windows
Windows 10: Click Start/File Explorer. In the left-hand menu, right-click My PC and select Map Network Drive.

Choose the desired drive letter you'd like to see PO.DAAC resources to appear under, then type or paste the following URL: https://podaac-tools.jpl.nasa.gov/drive/files

Check Connect using different credentials and click Finish

When prompted to log in, use your URS username aaronk and WebDAV password A7Ritko2uP79I0@MtDv.

You can now browse PODAAC files and copy them to your computer just as you would with a local hard drive. It's best to copy a file to your computer before opening it.

To disconnect, right-click the drive and select Disconnect.

If you experience a slow connection or issues logging in, try going to Control Panel/Internet Options, select the Connections tab, click LAN settings and uncheck the Automatically detect settings box. For more information, see https://support.microsoft.com/en-us/kb/2445570.

For more information, see: Create a shortcut to (map) a network drive.

%}

opts = delimitedTextImportOptions("NumVariables", 43);

% Specify range and delimiter
opts.DataLines = [92001, Inf];
opts.Delimiter = " ";

% Specify column names and types
opts.VariableNames = ["header", "VarName2", "Var3", "Var4", "VarName5", "VarName6", "VarName7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41", "Var42", "Var43"];
opts.SelectedVariableNames = ["header", "VarName2", "VarName5", "VarName6", "VarName7"];
opts.VariableTypes = ["double", "double", "string", "string", "double", "double", "double", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.LeadingDelimitersRule = "ignore";

% Specify variable properties
opts = setvaropts(opts, ["Var3", "Var4", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41", "Var42", "Var43"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var3", "Var4", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41", "Var42", "Var43"], "EmptyFieldRule", "auto");

% Import the data


%%%%%% define relative path or path to files %%%%%%%
MAG1B20180610D04 = readtable("C:\Users\aaronknudtson\Downloads\GraceFO1009\MAG1B_2018-06-10_D_04.txt", opts);
MAG1B20180610C04 = readtable("C:\Users\aaronknudtson\Downloads\GraceFO1009\MAG1B_2018-06-10_C_04.txt", opts);


%% Acceleration Noise
Nd = 1;
Nf = 1000;
% f = logspace(-5, 0, Nf)';
% f = f(:, ones(1, Nd));
s = 0.03; A = s^2; %m, m^2
mu0 = pi*4e-7; %magnetic field constant
sig0 = 1;
sigma = 5.67e-8;                %stephan boltzmann constant (W*m^-2*K^-4)
c  = 3e8;                       %speed of light (m/s)
k_B = 1.38064852e-23;           %Boltzmann constant (m2 kg s-2 K-1)


stddev = 0.05;
X_tm = 2e-5; %X0-j*s*mu0*sig0*pi*f/12;
M = 1e-8; %check this number
P = 1e-5;                       %Reservoir Pressure (Pa)
T0 = 293;                       %Reservoir Temp (K)
dT = 5e-3;


% Magnetic
shield_att = 1/100;
mass = 1.96;
arrC = table2array(MAG1B20180610C04);
Be_C = arrC(:,3)/1e6; %one is backwards
B_Crandn = shield_att*(Be_C-(0.5e-6*10)).*(1+(randn(size(Be_C)))*stddev); %Bd(:,1); %SC is flipped, must subtract, adding 1% noise
Fbx_Crandn = (X_tm*s^3/mu0.*B_Crandn+M).*shield_att*5e-6*100.*(1+(randn(size(Be_C)))*stddev); %Bgrad_C; % 10x worse than LPF
aBx = Fbx_Crandn/mass;
aBx = lowpass(aBx,1e-3,2,'impulseresponse','iir');
[pxx,f] = pwelch(aBx, hanning(length(aBx)),[],[], 2); %round(length(aBx)/5)
aM = sqrt(pxx);

B_Crandnus = (Be_C-(0.5e-6*10)).*(1+(randn(size(Be_C)))*stddev); %Bd(:,1); %SC is flipped, must subtract, adding 1% noise
Fbx_Crandnus = (X_tm*s^3/mu0.*B_Crandnus+M).*5e-6*100.*(1+(randn(size(Be_C)))*stddev); %Bgrad_C; % 10x worse than LPF
aBxus = Fbx_Crandnus/mass;
aBxus = lowpass(aBxus,1e-3,2,'impulseresponse','iir');
[pxxus,fus] = pwelch(aBxus, hanning(length(aBxus)),[],[], 2); %round(length(aBx)/5)
aMus = sqrt(pxxus);


dTf = dT.*(1e-3./f).^(1/3);
bound = 4e-13.*sqrt(1+(700e-6./f)+(300e-6./f).^2);
bound2 = 5e-13.*sqrt(1+(1./f).^(2/3));



% Thermal
dF_RdT = A*P/4/T0; %N/K
dF_RPdT = A*8/3*sigma/c*T0^3; %N/K
dF_OGdT = 5.8e-13; %A_wall*A*Io*theta/(T0^2)/Ceff; %N/K
a_R = dF_RdT.*dTf/mass;
a_RP = dF_RPdT.*dTf/mass;
a_OG = dF_OGdT.*dTf/mass;
dFdT = dF_RdT+dF_RPdT+dF_OGdT;
uppLim = dFdT*5e-3/1.96
a_TG = a_R + a_RP + a_OG;


%% Charge Noise
E0 = 8.854e-12;
A = (32e-3)^2; %mm^2, area of TM face
d = 1e-3;
Ci = E0*A/d;
dCdK = Ci/d;
C_T = 6*Ci;

e = 1.602e-19; % Coulombs, charge of an electron 
M = 1.96; % kg, mass of proof mass (TM)
lamda_eff = 5000; % e/s
Vtm = 70e-3; %70 mV, Q/C_T

%TM Charge
S_Q = e./(2*pi.*f).*sqrt(2*lamda_eff);

%Stray Potentials
Vi = 0.1; % 100 mV
S_Vi = sqrt(8.83e-16./(f.^2) +  2.73e-13./f)*Vi;


Sa8 = 1/(M*C_T)*Vi*dCdK*S_Q;
Sa11 = Vtm/M*dCdK*S_Vi;
a_C = Sa8+Sa11;

% a_sum = a_C+a_TG+aM;

%% Brownian Noise
M_gas = 18.01528;
m_gas = 2.9915076e-26;          %Reservoir Gas avg. mass (gas is water) (kg)

B_inf_tr = P*s^2*(1+pi/8)*(32*m_gas/pi/k_B/T0)^(1/2);           %Brownian damping coefficient for cube translating
B_tr = B_inf_tr/log(s/d)/(d/s)^2;

S_F = 4*k_B*T0*real(B_tr);
a_rgi = sqrt(S_F)/mass*ones(size(f(:, 1))); %same as a_gas, check if same values. Likely won't scale accordingly because of geometry difference


%% Stiffness
% A = importdata('timeseriesdata/Noise_Act_X_drag_comp.mat')
A1 = importdata('timeseriesdata/X_pos_drag_comp.mat');
A2 = importdata('timeseriesdata/X_pos_non_drag_comp.mat');
B1 = importdata('timeseriesdata/Noise_Act_X_drag_comp.mat');
B2 = importdata('timeseriesdata/Noise_Act_X_non_drag_comp.mat');

[pxx1,f_stiffness1] = pwelch(A1.data, [], [],[], 10);
[pxx2,f_stiffness2] = pwelch(A2.data, [], [],[], 10);
[pxx1act,f_act1] = pwelch(B1.data, [], [],[], 10);
[pxx2act,f_act2] = pwelch(B2.data, [], [],[], 10);


% figure
% loglog(f_stiffness1,sqrt(pxx1), f_stiffness2, sqrt(pxx2), f_act1, pxx1act, f_act2, pxx2act)

xlabel('Frequency (Hz)')
ylabel('m/Hz^{1/2}')

stiffness_coeff = 2.5e-6;
% stiffness_coeff = 2e-8;
[pxx1,f_stiffness1] = pwelch(A1.data*stiffness_coeff, [], [],[], 10);
stiffness_coeff = 5.8e-4;
[pxx2,f_stiffness2] = pwelch(A2.data*stiffness_coeff, [], [],[], 10);

% figure
% loglog(f_stiffness1,sqrt(pxx1), f_stiffness2,sqrt(pxx2))
% xlabel('Frequency (Hz)')
% ylabel('m/s^2/Hz^{1/2}')

a_stiffness1 = sqrt(pxx1);
a_stiffness2 = sqrt(pxx2); 
a_act1 = sqrt(pxx1act);
a_act2 = sqrt(pxx2act); 



%% Others
a_LRI = 1e-15*200000./sqrt(f).*(2.*pi.*f).^2;
Xnr = 1e-9;                     % TM sensing error for D-F control [S]
a_anr = Xnr.*(2.*pi.*f).^2;



a_spec2 = 5*10^(-13)*sqrt(1+(1./f).^(2/3));

% aMhat = interp1(fM,aM,f);
ast1hat = interp1(f_stiffness1,a_stiffness1,f);
ast2hat = interp1(f_stiffness2,a_stiffness2,f);
aact1hat = interp1(f_act1,a_act1,f);
aact2hat = interp1(f_act2,a_act2,f);


a_tot1 = sqrt(aM.^2+a_TG.^2+a_rgi.^2+a_C.^2);
a_tot2 = sqrt(aM.^2+a_TG.^2+a_rgi.^2+a_C.^2);

% figure
% loglog(f,a_tot1,f,a_tot2)
%% Plot
% a_tot = aM+a_TG+a_C+a_rgi;
ColOrd = get(gca,'ColorOrder');

figure
loglog(f,bound,'k','LineWidth',1)
hold on
loglog(f,a_tot1,'k')
hold on
loglog(f,aM,'Color',ColOrd(2,:))
hold on
loglog(fus,aMus,'Color',[0.2, 0.2, 0.2, 0.2],'LineWidth',0.01)
hold on
loglog(f,a_TG,'Color',ColOrd(3,:),'LineWidth',1) 
hold on
loglog(f,a_rgi,'Color',ColOrd(6,:),'LineWidth',1)
hold on
loglog(f,a_C,'Color',ColOrd(5,:),'LineWidth',1)
hold on
loglog(f,ast1hat,'Color',ColOrd(5,:))
hold on
loglog(f,a_anr,'--','Color',ColOrd(7,:),'LineWidth',1)
hold on
loglog(f,a_LRI,'--','Color',ColOrd(6,:),'LineWidth',1)

xlabel('frequency (Hz)')
ylabel('acceleration noise (m/s^{2}Hz^{1/2})')
legend('spec performance','total estimate','magnetic','magnetic no shielding','thermal','brownian', 'electrical','stiffness','capacitive sensing','LRI')
axis([1e-4 1e-1 1e-15 1e-9])
grid on




figure
loglog(f,a_spec2,'k','LineWidth',1)
hold on
loglog(f,a_tot2,'k')
hold on
loglog(f,ast2hat,'Color',ColOrd(5,:))
hold on
loglog(f,aact2hat,'Color',ColOrd(7,:))
hold on
loglog(f,a_anr,'--','Color',ColOrd(7,:),'LineWidth',1)
hold on
loglog(f,a_LRI,'--','Color',ColOrd(6,:),'LineWidth',1)

xlabel('frequency (Hz)')
ylabel('acceleration noise (m/s^{2}Hz^{1/2})')
legend('spec performance','other noise','stiffness','actuation','capacitive sensing','LRI')
axis([1e-4 1e-1 1e-15 1e-9])
grid on

